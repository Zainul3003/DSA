 1.toposort and store in stack
 2.reverse graph
 3. number of connected components according to topo
   
   
   
   void dfs(int node,vector<int> adj[],vector<int> &vis,stack<int>&st)
    {
        vis[node]=1;
        for(auto it:adj[node])
        {
            if(!vis[it])dfs(it,adj,vis,st);
        }
        st.push(node);
    }
    void revdfs(int node,vector<int> transpose[],vector<int> &vis)
    {
        vis[node]=1;
        for(auto it:transpose[node])
        {
            if(!vis[it])revdfs(it,transpose,vis);
        }
    }
    int kosaraju(int V, vector<int> adj[])
    {
        vector<int> vis(V,0);
        stack<int> st;
        for(int i=0;i<V;i++)
        {
            if(!vis[i])dfs(i,adj,vis,st);
        }
        vector<int> transpose[V];
        for(int i=0;i<V;i++)
        {
            vis[i]=0;
            for(auto it:adj[i])
            {
                transpose[it].push_back(i);
            }
        }
        int ans=0;
        while(!st.empty())
        {
            int node=st.top();
            st.pop();
            if(!vis[node])
            {
                ans++;
                revdfs(node,transpose,vis);
            }
        }
        return ans;
    }
